package ui;

import oracle.jdbc.OracleDriver;
//import sun.jvm.hotspot.gc_interface.GCName;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.*;


public class hw3 {

    private JPanel MainP;
    private JPanel TopP;
    private JPanel ButtomP;
    private JScrollPane GenreSP;
    private JScrollPane CountrySP;
    private JScrollPane LocationSP;
    private JPanel CriticsPanel;
    private JPanel MovieTagPanel;
    private JPanel RatingP;
    private JPanel WeightPanel;
    private JScrollPane GeneratedSQLScrollPanel;
    private JPanel SearchPanel;
    private JScrollPane ResultTableScrollPanel;
    private JPanel ConditionPanel;
    private JPanel ExecutePanel;
    private JLabel GenresLabel;
    private JLabel CountryLabel;
    private JLabel FilmingLabel;
    private JLabel OptionLabel;
    private JLabel RatingLab;
    private JComboBox ratingComboBox;
    private JTextField RatingTField;
    private JLabel RatingsLab;
    private JLabel RatingValueLabel;
    private JComboBox WeightComboBox;
    private JTextField WeightVTField;
    private JLabel wLabel;
    private JLabel wValueLabel;
    private JTextArea GenerateSQLCmdTextArea;
    private JLabel GenerateSQLCmdLabel;
    private JComboBox ConditionComboBox;
    private JButton ExecuteButton;
    private JLabel SearchLabel;
    private JTable QueryResultTable;
    private JPanel GenrePanel;
    private JPanel CountryPanel;
    private JPanel LocationPanel;
    private JButton LoadButton;
    private JPanel LoadPanel;
    private JComboBox ReviewComboBox;
    private JTextField ReviewVTField;
    private JLabel ReviewVLab;
    private JLabel ReviewLab;
    private JPanel ReviewPanel;
    private JPanel ratingReviewP;
    private JScrollPane TagScrollPanel;
    private JLabel TagLab;
    private JLabel YearLabel;
    private JLabel YearFromLabel;
    private JLabel YearToLabel;
    private JPanel YearPanel;
    private JPanel YearFromPanel;
    private JSpinner YearFromSpinner;
    private JPanel YearToPanel;
    private JPanel TagP;
    private JLabel label;
    private JLabel QRLabel;
    private JSpinner YearToSpinner;


    private ArrayList<JCheckBox> selectedGenres;
    private ArrayList<JCheckBox> selectedCountries;
    private ArrayList<JCheckBox> selectedFilmCountries;
    private ArrayList<JCheckBox> selectedTags;
    private String searchCondition;
    private String queryCondition;
    private Connection conn;
    private DefaultTableModel tModel;
    private String criticRating;
    private String criticValue;
    private String numOfReview;
    private String reviewValue;
    private String yearFrom;
    private String yearTo;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainP = new JPanel();
        MainP.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1, true, false));
        MainP.setBackground(new Color(-1282155));
        MainP.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        final JLabel label1 = new JLabel();
        label1.setText("Movie Search");
        MainP.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TopP = new JPanel();
        TopP.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 7, new Insets(0, 0, 0, 0), -1, -1));
        MainP.add(TopP, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        GenreSP = new JScrollPane();
        GenreSP.setHorizontalScrollBarPolicy(30);
        GenreSP.setVerticalScrollBarPolicy(20);
        TopP.add(GenreSP, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(50, 100), null, 0, false));
        GenrePanel = new JPanel();
        GenrePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        GenreSP.setViewportView(GenrePanel);
        CountrySP = new JScrollPane();
        TopP.add(CountrySP, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(50, 100), null, 0, false));
        CountryPanel = new JPanel();
        CountryPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        CountrySP.setViewportView(CountryPanel);
        LocationSP = new JScrollPane();
        TopP.add(LocationSP, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(50, 100), null, 0, false));
        LocationPanel = new JPanel();
        LocationPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        LocationSP.setViewportView(LocationPanel);
        CriticsPanel = new JPanel();
        CriticsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        TopP.add(CriticsPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        CriticsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ratingReviewP = new JPanel();
        ratingReviewP.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        CriticsPanel.add(ratingReviewP, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ratingReviewP.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        RatingP = new JPanel();
        RatingP.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        ratingReviewP.add(RatingP, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        RatingP.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        RatingLab = new JLabel();
        RatingLab.setText("Critics' Rating");
        RatingP.add(RatingLab, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ratingComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("=, <, >, <=, >=");
        defaultComboBoxModel1.addElement("=");
        defaultComboBoxModel1.addElement("<");
        defaultComboBoxModel1.addElement(">");
        defaultComboBoxModel1.addElement("<=");
        defaultComboBoxModel1.addElement(">=");
        ratingComboBox.setModel(defaultComboBoxModel1);
        RatingP.add(ratingComboBox, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RatingTField = new JTextField();
        RatingP.add(RatingTField, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        RatingsLab = new JLabel();
        RatingsLab.setText("Ratings:");
        RatingP.add(RatingsLab, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RatingValueLabel = new JLabel();
        RatingValueLabel.setText("Value:");
        RatingP.add(RatingValueLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearPanel = new JPanel();
        YearPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        ratingReviewP.add(YearPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        YearPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        YearLabel = new JLabel();
        YearLabel.setText("Movie Year");
        YearPanel.add(YearLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearFromLabel = new JLabel();
        YearFromLabel.setText("From:");
        YearPanel.add(YearFromLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearFromPanel = new JPanel();
        YearFromPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        YearPanel.add(YearFromPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        YearToLabel = new JLabel();
        YearToLabel.setText("To:");
        YearPanel.add(YearToLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearToPanel = new JPanel();
        YearToPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        YearPanel.add(YearToPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ReviewPanel = new JPanel();
        ReviewPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        ratingReviewP.add(ReviewPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ReviewPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ReviewComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("=, <, >, <=, >=");
        defaultComboBoxModel2.addElement("=");
        defaultComboBoxModel2.addElement("<");
        defaultComboBoxModel2.addElement(">");
        defaultComboBoxModel2.addElement("<=");
        defaultComboBoxModel2.addElement(">=");
        ReviewComboBox.setModel(defaultComboBoxModel2);
        ReviewPanel.add(ReviewComboBox, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ReviewVTField = new JTextField();
        ReviewPanel.add(ReviewVTField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        ReviewVLab = new JLabel();
        ReviewVLab.setText("Value:");
        ReviewPanel.add(ReviewVLab, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ReviewLab = new JLabel();
        ReviewLab.setText("Num Of Reviews");
        ReviewPanel.add(ReviewLab, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MovieTagPanel = new JPanel();
        MovieTagPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        MovieTagPanel.setBackground(new Color(-1282155));
        TopP.add(MovieTagPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        MovieTagPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        WeightPanel = new JPanel();
        WeightPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        MovieTagPanel.add(WeightPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        WeightPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        WeightComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("=, <, >, <=, >=");
        defaultComboBoxModel3.addElement("=");
        defaultComboBoxModel3.addElement("<");
        defaultComboBoxModel3.addElement(">");
        defaultComboBoxModel3.addElement("<=");
        defaultComboBoxModel3.addElement(">=");
        WeightComboBox.setModel(defaultComboBoxModel3);
        WeightPanel.add(WeightComboBox, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        WeightVTField = new JTextField();
        WeightPanel.add(WeightVTField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 27), null, 0, false));
        wLabel = new JLabel();
        wLabel.setText("Weight:");
        WeightPanel.add(wLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        wValueLabel = new JLabel();
        wValueLabel.setText("Value:");
        WeightPanel.add(wValueLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(35, 27), null, 0, false));
        TagScrollPanel = new JScrollPane();
        MovieTagPanel.add(TagScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        TagScrollPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        TagP = new JPanel();
        TagP.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        TagScrollPanel.setViewportView(TagP);
        TagLab = new JLabel();
        TagLab.setText("Movie Tag");
        MovieTagPanel.add(TagLab, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        GenresLabel = new JLabel();
        GenresLabel.setText("Genres");
        TopP.add(GenresLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CountryLabel = new JLabel();
        CountryLabel.setText("Country");
        TopP.add(CountryLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        FilmingLabel = new JLabel();
        FilmingLabel.setText("Location");
        TopP.add(FilmingLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        OptionLabel = new JLabel();
        OptionLabel.setText("");
        TopP.add(OptionLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtomP = new JPanel();
        ButtomP.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        MainP.add(ButtomP, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        GeneratedSQLScrollPanel = new JScrollPane();
        ButtomP.add(GeneratedSQLScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(200, 100), null, 0, false));
        GeneratedSQLScrollPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        GenerateSQLCmdTextArea = new JTextArea();
        GenerateSQLCmdTextArea.setEditable(false);
        GenerateSQLCmdTextArea.setLineWrap(true);
        GeneratedSQLScrollPanel.setViewportView(GenerateSQLCmdTextArea);
        SearchPanel = new JPanel();
        SearchPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        ButtomP.add(SearchPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        SearchPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ConditionPanel = new JPanel();
        ConditionPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        SearchPanel.add(ConditionPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ConditionPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ConditionComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("OR");
        defaultComboBoxModel4.addElement("AND");
        ConditionComboBox.setModel(defaultComboBoxModel4);
        ConditionPanel.add(ConditionComboBox, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label = new JLabel();
        label.setText("And/Or");
        ConditionPanel.add(label, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ExecutePanel = new JPanel();
        ExecutePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        SearchPanel.add(ExecutePanel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ExecutePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ExecuteButton = new JButton();
        ExecuteButton.setText("Execute");
        ExecutePanel.add(ExecuteButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        LoadPanel = new JPanel();
        LoadPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        SearchPanel.add(LoadPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        LoadPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        LoadButton = new JButton();
        LoadButton.setText("search");
        LoadPanel.add(LoadButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        SearchLabel = new JLabel();
        SearchLabel.setText("Search Condition");
        SearchPanel.add(SearchLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        GenerateSQLCmdLabel = new JLabel();
        GenerateSQLCmdLabel.setText("Query Table");
        ButtomP.add(GenerateSQLCmdLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ResultTableScrollPanel = new JScrollPane();
        ButtomP.add(ResultTableScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(250, 100), null, 0, false));
        ResultTableScrollPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        QueryResultTable = new JTable();
        QueryResultTable.setAutoResizeMode(4);
        QueryResultTable.setFillsViewportHeight(true);
        ResultTableScrollPanel.setViewportView(QueryResultTable);
        QRLabel = new JLabel();
        QRLabel.setText("Result Table");
        ButtomP.add(QRLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainP;
    }


    public enum AttrType {
        Genres,
        Countries
    }


    public hw3() {
        conn = null;
        selectedGenres = new ArrayList<>();
        selectedCountries = new ArrayList<>();
        selectedFilmCountries = new ArrayList<>();
        selectedTags = new ArrayList<>();
        searchCondition = "OR";
        queryCondition = "AND";
        tModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "#", "title", "genre", "year", "country",
                        "filming locations", "AvgOfRating", "AvgOfReview"
                }
        );
        $$$setupUI$$$();
        QueryResultTable.setModel(tModel);

        int yrrange = 150;
        YearFromPanel.setLayout(new FlowLayout());
        Calendar calendar = Calendar.getInstance();
        int curyear = calendar.get(Calendar.YEAR);
        SpinnerModel yearfrommodel = new SpinnerNumberModel(curyear - yrrange, curyear - yrrange, curyear, 1);
        YearFromSpinner = new JSpinner(yearfrommodel);
        YearFromSpinner.setEditor(new JSpinner.NumberEditor(YearFromSpinner, "#"));
        YearFromPanel.add(YearFromSpinner);
        YearToPanel.setLayout(new FlowLayout());
        SpinnerModel yeartomodel = new SpinnerNumberModel(curyear, curyear - yrrange, curyear, 1);
        YearToSpinner = new JSpinner(yeartomodel);
        YearToSpinner.setEditor(new JSpinner.NumberEditor(YearToSpinner, "#"));
        YearToPanel.add(YearToSpinner);
        clicksearchButton();

        LoadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clicksearchButton();
            }
        });
        ConditionComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clickConditionComboBox();
            }
        });


        ReviewVTField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                reviewValue = ReviewVTField.getText();
                System.out.println("[Info]: Review Value: " + reviewValue);
                pMovieTag();
            }
        });
        WeightComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String tagWeight = WeightComboBox.getSelectedItem().toString();
                System.out.println("[Info]: Tag Weight Selects: " + tagWeight);
                pMovieTag();
            }
        });
        ExecuteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clickExecuteButton();

            }
        });
        ratingComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                criticRating = ratingComboBox.getSelectedItem().toString();
                System.out.println("[Info]: Critics Selects: " + criticRating);
                pMovieTag();
            }
        });
        RatingTField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                criticValue = RatingTField.getText();
                System.out.println("[Info]: Critics Value: " + criticValue);
                pMovieTag();
            }
        });
        ReviewComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                numOfReview = ReviewComboBox.getSelectedItem().toString();
                System.out.println("[Info]: Number of Review : " + numOfReview);
                pMovieTag();
            }
        });
        WeightVTField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String tagValue = WeightVTField.getText();
                System.out.println("[Info]: Tag Weight value: " + tagValue);
                pMovieTag();
            }
        });
        YearFromSpinner.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                yearFrom = String.valueOf(YearFromSpinner.getValue());
                if (!yearFrom.isEmpty()) {
                    System.out.println("[Info]: Year From : " + yearFrom);
                    pMovieTag();
                }
            }
        });
        YearToSpinner.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                yearTo = String.valueOf(YearToSpinner.getValue());
                if (!yearTo.isEmpty()) {
                    System.out.println("[Info]: Year To : " + yearTo);
                    pMovieTag();
                }
            }
        });
    }

    public static void main(String[] args) {
        hw3 entry = new hw3();
        entry.startQueryEngine();
    }

    public void startQueryEngine() {
        JFrame frame = new JFrame("hw3");
        frame.setContentPane(new hw3().MainP);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);

    }


    private void clickExecuteButton() {
        ResultSet result = null;
        ResultSetMetaData metaresult = null;
        String query = null;
        int numOfCol = 0;
        int numOfRow = 1;

        try {
            query = collectRequest();
            GenerateSQLCmdTextArea.setText(query);
            result = executeQuery(query);
            metaresult = result.getMetaData();
            numOfCol = metaresult.getColumnCount();
            tModel = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                            "#", "title", "genre", "year", "country",
                            "filming locations", "AvgOfRating", "AvgOfReview"
                    }
            );
            QueryResultTable.setModel(tModel);
            System.out.println("Fetching data from DB server ....");
            while (result.next()) {
                Object[] objects = new Object[numOfCol + 1];
                objects[0] = numOfRow;
                for (int i = 1; i <= numOfCol; i++) {
                    objects[i] = result.getObject(i);
                }
                numOfRow++;
                tModel.addRow(objects);
            }
            if (numOfRow == 1) {
                JOptionPane.showMessageDialog(null, "No data found in DB based on the query conditions");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnect();
        }
    }

    private void clickConditionComboBox() {
        searchCondition = ConditionComboBox.getSelectedItem().toString();

        if (searchCondition == "OR" || searchCondition == "AND") {
            loadCountry();
            loadFilmCountry();
        } else {
            System.err.println("[Error]: Cannot find condition: " + searchCondition);
        }
    }

    private void clicksearchButton() {
        ResultSet result = null;
        for (JCheckBox cb : selectedGenres) {
            cb.setVisible(false);
            GenrePanel.remove(cb);
        }
        selectedGenres.clear();
        GenrePanel.updateUI();

        cleanCountryTable();
        cleanLocationP();
        cleanTagTable();
        cleanAllText();
        ratingComboBox.setSelectedIndex(0);
        ReviewComboBox.setSelectedIndex(0);
        WeightComboBox.setSelectedIndex(0);

        System.out.println("Start to load all Genres data");
        try {
            String query = "SELECT DISTINCT genre\n" + "FROM movie_genres\n" + "ORDER BY genre";
            result = executeQuery(query);

            cleanCountryTable();
            cleanLocationP();
            while (result.next()) {
                GenrePanel.setLayout(new GridLayout(0, 1));
                //GenrePanel.setLayout(new GridLayout(0, 5, 20, 20));
                JCheckBox cb = new JCheckBox(result.getString(1));
                cb.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {

                        loadCountry();
                    }
                });
                selectedGenres.add(cb);
                GenrePanel.add(cb);
                GenrePanel.revalidate();
                GenrePanel.repaint();
            }
            System.out.println("Load Genre completely");


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnect();
        }
    }


    private void pMovieTag() {
        if (selectedGenres.size() != 0 && selectedCountries.size() != 0 && selectedFilmCountries.size() != 0) {
            if ((criticRating != null && criticValue != null) && (numOfReview != null && reviewValue != null)
                    && (yearFrom != null && yearTo != null)) {
                if (!criticRating.equals(("=, <, >, <=, >=")) && !numOfReview.equals(("=, <, >, <=, >="))) {
                    loadMovieTag();
                }
            }
        }
    }


    private ArrayList<String> selectCheckb(AttrType type) {
        ArrayList<String> checkList = new ArrayList<>();
        ArrayList<JCheckBox> typeList = new ArrayList<>();
        if (type.equals(AttrType.Genres)) {
            typeList = selectedGenres;
        } else if (type.equals(AttrType.Countries)) {
            typeList = selectedCountries;
        }
        for (JCheckBox cb : typeList) {
            if (cb.isSelected()) {
                checkList.add(cb.getText());
            }
        }
        return checkList;
    }


    private void cleanCountryTable() {
        for (JCheckBox cb : selectedCountries) {
            cb.setVisible(false);
            CountryPanel.remove(cb);
        }
        selectedCountries.clear();
        CountryPanel.updateUI();
    }


    private void cleanLocationP() {
        for (JCheckBox cb : selectedFilmCountries) {
            cb.setVisible(false);
            LocationPanel.remove(cb);
        }
        selectedFilmCountries.clear();
        LocationPanel.updateUI();
    }


    private void cleanTagTable() {
        for (JCheckBox cb : selectedTags) {
            cb.setVisible(false);
            TagP.remove(cb);
        }
        selectedTags.clear();
        TagP.updateUI();
    }

    private void cleanAllText() {
        RatingTField.setText("");
        ReviewVTField.setText("");
        WeightVTField.setText("");
        GenerateSQLCmdTextArea.setText("");
        tModel = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "#", "title", "genre", "year", "country",
                        "filming locations", "AvgOfRating", "AvgOfReview"
                }
        );
        QueryResultTable.setModel(tModel);
    }


    private ResultSet executeQuery(String query) {
        Statement stmt = null;
        ResultSet result = null;
        try {
            System.out.print("Connect DB .... ");
            conn = openConnect();
            System.out.println("successfully ");
            stmt = conn.createStatement();
            result = stmt.executeQuery(query);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
        }

        return result;
    }

    private String collectQueryGenres() {
        StringBuilder sb = new StringBuilder();
        for (JCheckBox cb : selectedGenres) {
            if (cb.isSelected()) {
                if (sb.length() == 0) {
                    sb.append("(G.Genre LIKE '%" + cb.getText() + "%' ");
                } else {
                    sb.append(searchCondition + " G.Genre LIKE '%" + cb.getText() + "%' ");
                }
            }
        }
        if (sb.length() != 0) {
            sb.append(")\n");
        }
        return sb.toString();
    }


    private String collectlocation() {
        StringBuilder sb = new StringBuilder();
        String prefix = " (";
        for (JCheckBox cb : selectedFilmCountries) {
            if (cb.isSelected()) {
                if (sb.length() == 0) {
                    sb.append(queryCondition + prefix + "L.LOC LIKE '%" + cb.getText() + "%' ");
                } else {
                    sb.append(searchCondition + prefix + "L.LOC LIKE '%" + cb.getText() + "%' ");
                }
                prefix = " ";
            }
        }
        if (sb.length() != 0) {
            sb.append(")\n");
        }
        return sb.toString();
    }

    private String collectCountries() {
        StringBuilder sb = new StringBuilder();
        String prefix = " (";
        for (JCheckBox cb : selectedCountries) {
            if (cb.isSelected()) {
                if (sb.length() == 0) {
                    sb.append(queryCondition + prefix + "C.country = '" + cb.getText() + "' ");
                } else {
                    sb.append(searchCondition + prefix + "C.country = '" + cb.getText() + "' ");
                }
                prefix = " ";
            }
        }
        if (sb.length() != 0) {
            sb.append(")\n");
        }
        return sb.toString();
    }


    private String collectTag() {
        StringBuilder sb = new StringBuilder();
        String prefix = " (";
        for (JCheckBox cb : selectedTags) {
            if (cb.isSelected()) {
                if (sb.length() == 0) {
                    sb.append(queryCondition + prefix + "MT.value = '" + cb.getText() + "' ");
                } else {
                    sb.append(searchCondition + prefix + "MT.value = '" + cb.getText() + "' ");
                }
                prefix = " ";
            }
        }
        if (sb.length() != 0) {
            sb.append(")\n");
        }
        return sb.toString();
    }


    private String collectRating() {
        StringBuilder sb = new StringBuilder();
        if (criticRating != null && criticValue != null) {
            if (!criticRating.equals("=, <, >, <=, >=") && !criticValue.equals("")) {
                sb.append(queryCondition + " (M.rtAllCriticsRating " + criticRating + " " + criticValue + ")\n");
            }
        }
        return sb.toString();
    }


    private String collectReview() {
        StringBuilder sb = new StringBuilder();
        if (numOfReview != null && reviewValue != null) {
            if (!numOfReview.equals("=, <, >, <=, >=") && !reviewValue.equals("")) {
                sb.append(queryCondition + " (M.rtAllCriticsNumReviews " + numOfReview + " " + reviewValue + ")\n");
            }
        }
        return sb.toString();
    }


    private String collectYear() {
        StringBuilder sb = new StringBuilder();
        if (yearFrom != null && yearTo != null) {
            sb.append(queryCondition + " (M.year >= " + yearFrom + " AND M.year <= " + yearTo + ")\n");
        }
        return sb.toString();
    }


    private String collectWeight() {
        StringBuilder sb = new StringBuilder();
        String tagWeight = WeightComboBox.getSelectedItem().toString();
        String tagValue = WeightVTField.getText();
        if (tagWeight != null && tagValue != null) {
            if (!tagWeight.equals("=, <, >, <=, >=") && !tagValue.equals("")) {
                sb.append(queryCondition + " (MT.tagWeight " + tagWeight + " " + tagValue + ")\n");
            }
        }
        return sb.toString();
    }


    private String collectRequest() {
        StringBuilder select = new StringBuilder();
        StringBuilder from = new StringBuilder();
        StringBuilder where = new StringBuilder();
        select.append("SELECT DISTINCT title, G.genre as genre, year, C.country, L.LOC AS filmingLoc,\n");
        select.append("TRUNC((rtAllCriticsRating+rtTopCriticsRating+rtAudienceRating)/3, 2) AS AvgRating,\n");
        select.append("TRUNC((rtAllCriticsNumReviews+rtTopCriticsNumReviews+rtAudienceNumRatings)/3, 2) AS AvgReviews\n");
        from.append("FROM movies M, ");
        from.append("(SELECT DISTINCT movieID, LISTAGG(location1, ',') WITHIN GROUP (ORDER BY location1) AS LOC\n");
        from.append("FROM (SELECT DISTINCT location1, movieID FROM movie_locations) LOC2\n");
        from.append("GROUP BY LOC2.movieID) L, movie_countries C,\n");
        from.append("(SELECT DISTINCT movieID, LISTAGG(genre, ', ') WITHIN GROUP (ORDER BY genre) AS Genre\n");
        from.append("FROM movie_genres GROUP BY movie_genres.movieID) G\n");
        from.append("LEFT OUTER JOIN\n");
        from.append("(SELECT DISTINCT movieID, tagWeight, value\n");
        from.append("FROM movie_tags mt, tags t\n");
        from.append("WHERE mt.tagID = t.tagID\n");
        from.append(") MT on MT.movieID = G.movieID\n");
        where.append("WHERE M.movieID = G.movieID AND M.movieID = C.movieID AND ");
        where.append("G.movieID = C.movieID AND C.movieID = L.movieID ");
        if (selectedGenres.size() != 0) {
            where.append(queryCondition + " (\n");
            where.append(collectQueryGenres() + collectCountries() + collectlocation());
            where.append(collectRating() + collectReview() + collectYear());
            where.append(collectTag() + collectWeight());
            where.append(")");
        }

        return select.toString() + from.toString() + where.toString();
    }


    private void loadCountry() {
        ArrayList<String> checkList = selectCheckb(AttrType.Genres);
        ResultSet result = null;

        if (checkList.size() != 0) {
            StringBuilder sb = new StringBuilder();
            sb.append("SELECT DISTINCT country\n");
            sb.append("FROM movie_countries loc, ");
            sb.append("(");
            sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
            sb.append("FROM movie_genres\n");
            sb.append("GROUP BY movieID) select_genre\n");
            sb.append("WHERE select_genre.movieID = loc.movieID AND ");
            sb.append("(");
            for (int i = 0; i < checkList.size(); i++) {
                if (i == 0) {
                    sb.append("select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                } else {
                    sb.append(searchCondition + " select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                }
            }
            sb.append(")\n");
            sb.append("ORDER BY country");
            GenerateSQLCmdTextArea.setText(sb.toString());
            try {
                result = executeQuery(sb.toString());

                cleanCountryTable();
                while (result.next()) {
                    CountryPanel.setLayout(new GridLayout(0, 1));
                    String text = result.getString(1);
                    if (!text.equals(" ")) {
                        JCheckBox cb = new JCheckBox(text);
                        cb.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent e) {

                                loadFilmCountry();
                            }
                        });
                        selectedCountries.add(cb);
                        CountryPanel.add(cb);
                        CountryPanel.revalidate();
                        CountryPanel.repaint();
                    }
                }


            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            cleanCountryTable();
            cleanLocationP();
        }
    }


    private void loadFilmCountry() {
        ArrayList<String> checkGenreList = selectCheckb(AttrType.Genres);
        ArrayList<String> checkCountryList = selectCheckb(AttrType.Countries);
        ResultSet result = null;

        if (checkGenreList.size() != 0 && checkCountryList.size() != 0) {
            StringBuilder sb = new StringBuilder();
            sb.append("SELECT DISTINCT location1\n");
            sb.append("FROM movie_countries cty, movie_locations loc, ");
            sb.append("(");
            sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
            sb.append("FROM movie_genres\n");
            sb.append("GROUP BY movieID) select_genre\n");
            sb.append("WHERE select_genre.movieID = cty.movieID AND cty.movieID = loc.movieID AND ");
            for (int i = 0; i < checkGenreList.size(); i++) {
                if (i == 0) {
                    sb.append("(");
                    sb.append("select_genre.Genres LIKE '%" + checkGenreList.get(i) + "%'\n");
                } else {
                    sb.append(searchCondition + " select_genre.Genres LIKE '%" + checkGenreList.get(i) + "%'\n");
                }
            }
            sb.append(") ");
            sb.append("AND ");
            for (int j = 0; j < checkCountryList.size(); j++) {
                if (j == 0) {
                    sb.append("(");
                    sb.append("cty.country = '" + checkCountryList.get(j) + "'\n");
                } else {
                    sb.append(searchCondition + " cty.country = '" + checkCountryList.get(j) + "'\n");
                }
            }
            sb.append(")\n");
            sb.append("ORDER BY location1");
            GenerateSQLCmdTextArea.setText(sb.toString());
            try {
                result = executeQuery(sb.toString());

                cleanLocationP();
                while (result.next()) {
                    LocationPanel.setLayout(new GridLayout(0, 1));
                    String text = result.getString(1);
                    if (!text.equals(" ")) { // some countries don't have filming locations
                        JCheckBox cb = new JCheckBox(text);
                        selectedFilmCountries.add(cb);
                        LocationPanel.add(cb);
                        LocationPanel.revalidate();
                        LocationPanel.repaint();
                    }
                }


            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            cleanLocationP();
        }
    }


    private void loadMovieTag() {
        ResultSet result = null;
        StringBuilder resultsb = new StringBuilder();
        StringBuilder sb = new StringBuilder();

        sb.append("SELECT DISTINCT T.value\n");
        sb.append("FROM movies M, movie_tags MT , tags T, ");
        sb.append("(SELECT DISTINCT movieID, LISTAGG(location1, ',') WITHIN GROUP (ORDER BY location1) AS LOC\n");
        sb.append("FROM (SELECT DISTINCT location1, movieID FROM movie_locations) LOC2\n");
        sb.append("GROUP BY movieID) L, movie_countries C,\n");
        sb.append("(SELECT movieID, LISTAGG(genre, ', ') WITHIN GROUP (ORDER BY genre) AS Genre\n");
        sb.append("FROM movie_genres GROUP BY movieID) G\n");
        sb.append("WHERE M.movieID = MT.movieID AND MT.tagID = T.tagID\n");
        sb.append("AND M.rtAllCriticsRating " + criticRating + " " + criticValue + " ");
        sb.append("AND M.rtAllCriticsNumReviews " + numOfReview + " " + reviewValue + " ");
        sb.append("AND M.year >= " + yearFrom + " AND M.year <= " + yearTo + " ");
        sb.append(collectWeight());
        sb.append("\n");
        sb.append("AND M.movieID = G.movieID AND M.movieID = C.movieID ");
        sb.append("AND G.movieID = C.movieID AND C.movieID = L.movieID ");

        if (selectedGenres.size() != 0) {
            sb.append("AND (\n");
            sb.append(collectQueryGenres() + collectCountries() + collectlocation());
            sb.append(") ORDER BY T.value");
        }
        GenerateSQLCmdTextArea.setText(sb.toString());
        try {
            result = executeQuery(sb.toString());

            cleanTagTable();
            if (result == null) {
                JOptionPane.showMessageDialog(null, "No Tag value found in DB based on the query conditions");
            }
            while (result.next()) {
                TagP.setLayout(new GridLayout(0, 1));
                String text = result.getString(1);
                if (!text.equals(" ")) { // some movie don't have tags
                    JCheckBox cb = new JCheckBox(text);
                    selectedTags.add(cb);
                    TagP.add(cb);
                    TagP.revalidate();
                    TagP.repaint();
                }
            }


            if (selectedTags.size() == 0) {
                JOptionPane.showMessageDialog(null, "No Tag value found in DB based on the query conditions");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void closeConnect() {
        try {
            conn.close();
            System.out.println("Disconnect DB ...");
        } catch (SQLException e) {
            System.err.println("[Error]: Cannot close Oracle DB connection: " + e.getMessage());
        }
    }

    private Connection openConnect() throws SQLException, ClassNotFoundException {
        DriverManager.registerDriver(new OracleDriver());
        String host = "localhost";
        String port = "1521";
        String dbName = "orcl"; // Win: xe, MAC: orcl
        String uName = "bao";
        String pWord = "bao";

        String dbURL = "jdbc:oracle:thin:@//" + host + ":" + port + "/" + dbName;
        return DriverManager.getConnection(dbURL, uName, pWord);
    }
}
